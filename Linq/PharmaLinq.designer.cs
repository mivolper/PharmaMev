#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PharmaMev.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PharmaMev")]
	public partial class PharmaLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCaule(Caule instance);
    partial void UpdateCaule(Caule instance);
    partial void DeleteCaule(Caule instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertBuysAction(BuysAction instance);
    partial void UpdateBuysAction(BuysAction instance);
    partial void DeleteBuysAction(BuysAction instance);
    partial void InsertSalesAction(SalesAction instance);
    partial void UpdateSalesAction(SalesAction instance);
    partial void DeleteSalesAction(SalesAction instance);
    partial void InsertBuy(Buy instance);
    partial void UpdateBuy(Buy instance);
    partial void DeleteBuy(Buy instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    #endregion
		
		public PharmaLinqDataContext() : 
				base(global::PharmaMev.Properties.Settings.Default.PharmaMevConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PharmaLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PharmaLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PharmaLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PharmaLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Caule> Caules
		{
			get
			{
				return this.GetTable<Caule>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<BuysAction> BuysActions
		{
			get
			{
				return this.GetTable<BuysAction>();
			}
		}
		
		public System.Data.Linq.Table<SalesAction> SalesActions
		{
			get
			{
				return this.GetTable<SalesAction>();
			}
		}
		
		public System.Data.Linq.Table<Buy> Buys
		{
			get
			{
				return this.GetTable<Buy>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Groups;
		
		private string _GroupName;
		
		private int _ID_User;
		
		private bool _Exist;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_GroupsChanging(int value);
    partial void OnID_GroupsChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    #endregion
		
		public Group()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Groups", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Groups
		{
			get
			{
				return this._ID_Groups;
			}
			set
			{
				if ((this._ID_Groups != value))
				{
					this.OnID_GroupsChanging(value);
					this.SendPropertyChanging();
					this._ID_Groups = value;
					this.SendPropertyChanged("ID_Groups");
					this.OnID_GroupsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Product", Storage="_Products", ThisKey="ID_Groups", OtherKey="ID_Groups")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Customer;
		
		private string _CustomerName;
		
		private System.Nullable<int> _CustomerPhone;
		
		private bool _Exist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CustomerChanging(int value);
    partial void OnID_CustomerChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerPhoneChanging(System.Nullable<int> value);
    partial void OnCustomerPhoneChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    #endregion
		
		public Customer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Customer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Customer
		{
			get
			{
				return this._ID_Customer;
			}
			set
			{
				if ((this._ID_Customer != value))
				{
					this.OnID_CustomerChanging(value);
					this.SendPropertyChanging();
					this._ID_Customer = value;
					this.SendPropertyChanged("ID_Customer");
					this.OnID_CustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="VarChar(50)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone", DbType="Int")]
		public System.Nullable<int> CustomerPhone
		{
			get
			{
				return this._CustomerPhone;
			}
			set
			{
				if ((this._CustomerPhone != value))
				{
					this.OnCustomerPhoneChanging(value);
					this.SendPropertyChanging();
					this._CustomerPhone = value;
					this.SendPropertyChanged("CustomerPhone");
					this.OnCustomerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Caule")]
	public partial class Caule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Caule;
		
		private string _CauleName;
		
		private System.Nullable<int> _Phone;
		
		private bool _Exist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CauleChanging(int value);
    partial void OnID_CauleChanged();
    partial void OnCauleNameChanging(string value);
    partial void OnCauleNameChanged();
    partial void OnPhoneChanging(System.Nullable<int> value);
    partial void OnPhoneChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    #endregion
		
		public Caule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Caule", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Caule
		{
			get
			{
				return this._ID_Caule;
			}
			set
			{
				if ((this._ID_Caule != value))
				{
					this.OnID_CauleChanging(value);
					this.SendPropertyChanging();
					this._ID_Caule = value;
					this.SendPropertyChanged("ID_Caule");
					this.OnID_CauleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CauleName
		{
			get
			{
				return this._CauleName;
			}
			set
			{
				if ((this._CauleName != value))
				{
					this.OnCauleNameChanging(value);
					this.SendPropertyChanging();
					this._CauleName = value;
					this.SendPropertyChanged("CauleName");
					this.OnCauleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Int")]
		public System.Nullable<int> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Product;
		
		private string _Name;
		
		private string _BarCode;
		
		private System.Nullable<double> _Cost;
		
		private int _Quantity;
		
		private double _Price;
		
		private string _Units;
		
		private System.Nullable<double> _Unit_Price;
		
		private System.Nullable<int> _SubQuantity;
		
		private System.Nullable<int> _UnitQuantity;
		
		private string _BiggerUnit;
		
		private string _EX_Date;
		
		private bool _Exist;
		
		private int _ID_User;
		
		private int _ID_Groups;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ProductChanging(int value);
    partial void OnID_ProductChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    partial void OnCostChanging(System.Nullable<double> value);
    partial void OnCostChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    partial void OnUnit_PriceChanging(System.Nullable<double> value);
    partial void OnUnit_PriceChanged();
    partial void OnSubQuantityChanging(System.Nullable<int> value);
    partial void OnSubQuantityChanged();
    partial void OnUnitQuantityChanging(System.Nullable<int> value);
    partial void OnUnitQuantityChanged();
    partial void OnBiggerUnitChanging(string value);
    partial void OnBiggerUnitChanged();
    partial void OnEX_DateChanging(string value);
    partial void OnEX_DateChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnID_GroupsChanging(int value);
    partial void OnID_GroupsChanged();
    #endregion
		
		public Product()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Product", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Product
		{
			get
			{
				return this._ID_Product;
			}
			set
			{
				if ((this._ID_Product != value))
				{
					this.OnID_ProductChanging(value);
					this.SendPropertyChanging();
					this._ID_Product = value;
					this.SendPropertyChanged("ID_Product");
					this.OnID_ProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Float")]
		public System.Nullable<double> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="VarChar(50)")]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_Price", DbType="Float")]
		public System.Nullable<double> Unit_Price
		{
			get
			{
				return this._Unit_Price;
			}
			set
			{
				if ((this._Unit_Price != value))
				{
					this.OnUnit_PriceChanging(value);
					this.SendPropertyChanging();
					this._Unit_Price = value;
					this.SendPropertyChanged("Unit_Price");
					this.OnUnit_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubQuantity", DbType="Int")]
		public System.Nullable<int> SubQuantity
		{
			get
			{
				return this._SubQuantity;
			}
			set
			{
				if ((this._SubQuantity != value))
				{
					this.OnSubQuantityChanging(value);
					this.SendPropertyChanging();
					this._SubQuantity = value;
					this.SendPropertyChanged("SubQuantity");
					this.OnSubQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitQuantity", DbType="Int")]
		public System.Nullable<int> UnitQuantity
		{
			get
			{
				return this._UnitQuantity;
			}
			set
			{
				if ((this._UnitQuantity != value))
				{
					this.OnUnitQuantityChanging(value);
					this.SendPropertyChanging();
					this._UnitQuantity = value;
					this.SendPropertyChanged("UnitQuantity");
					this.OnUnitQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BiggerUnit", DbType="VarChar(50)")]
		public string BiggerUnit
		{
			get
			{
				return this._BiggerUnit;
			}
			set
			{
				if ((this._BiggerUnit != value))
				{
					this.OnBiggerUnitChanging(value);
					this.SendPropertyChanging();
					this._BiggerUnit = value;
					this.SendPropertyChanged("BiggerUnit");
					this.OnBiggerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EX_Date", DbType="VarChar(50)")]
		public string EX_Date
		{
			get
			{
				return this._EX_Date;
			}
			set
			{
				if ((this._EX_Date != value))
				{
					this.OnEX_DateChanging(value);
					this.SendPropertyChanging();
					this._EX_Date = value;
					this.SendPropertyChanged("EX_Date");
					this.OnEX_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Groups", DbType="Int NOT NULL")]
		public int ID_Groups
		{
			get
			{
				return this._ID_Groups;
			}
			set
			{
				if ((this._ID_Groups != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_GroupsChanging(value);
					this.SendPropertyChanging();
					this._ID_Groups = value;
					this.SendPropertyChanged("ID_Groups");
					this.OnID_GroupsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Product", Storage="_Group", ThisKey="ID_Groups", OtherKey="ID_Groups", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ID_Groups = value.ID_Groups;
					}
					else
					{
						this._ID_Groups = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuysAction")]
	public partial class BuysAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_BuyAction;
		
		private int _ID_Buy;
		
		private int _ID_Product;
		
		private System.Nullable<int> _Quantit_BuysAction;
		
		private System.Nullable<decimal> _Cost;
		
		private string _EX_Date;
		
		private System.Nullable<decimal> _totatCost;
		
		private System.Nullable<bool> _Exist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_BuyActionChanging(int value);
    partial void OnID_BuyActionChanged();
    partial void OnID_BuyChanging(int value);
    partial void OnID_BuyChanged();
    partial void OnID_ProductChanging(int value);
    partial void OnID_ProductChanged();
    partial void OnQuantit_BuysActionChanging(System.Nullable<int> value);
    partial void OnQuantit_BuysActionChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnEX_DateChanging(string value);
    partial void OnEX_DateChanged();
    partial void OntotatCostChanging(System.Nullable<decimal> value);
    partial void OntotatCostChanged();
    partial void OnExistChanging(System.Nullable<bool> value);
    partial void OnExistChanged();
    #endregion
		
		public BuysAction()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_BuyAction", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_BuyAction
		{
			get
			{
				return this._ID_BuyAction;
			}
			set
			{
				if ((this._ID_BuyAction != value))
				{
					this.OnID_BuyActionChanging(value);
					this.SendPropertyChanging();
					this._ID_BuyAction = value;
					this.SendPropertyChanged("ID_BuyAction");
					this.OnID_BuyActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Buy", DbType="Int NOT NULL")]
		public int ID_Buy
		{
			get
			{
				return this._ID_Buy;
			}
			set
			{
				if ((this._ID_Buy != value))
				{
					this.OnID_BuyChanging(value);
					this.SendPropertyChanging();
					this._ID_Buy = value;
					this.SendPropertyChanged("ID_Buy");
					this.OnID_BuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Product", DbType="Int NOT NULL")]
		public int ID_Product
		{
			get
			{
				return this._ID_Product;
			}
			set
			{
				if ((this._ID_Product != value))
				{
					this.OnID_ProductChanging(value);
					this.SendPropertyChanging();
					this._ID_Product = value;
					this.SendPropertyChanged("ID_Product");
					this.OnID_ProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantit_BuysAction", DbType="Int")]
		public System.Nullable<int> Quantit_BuysAction
		{
			get
			{
				return this._Quantit_BuysAction;
			}
			set
			{
				if ((this._Quantit_BuysAction != value))
				{
					this.OnQuantit_BuysActionChanging(value);
					this.SendPropertyChanging();
					this._Quantit_BuysAction = value;
					this.SendPropertyChanged("Quantit_BuysAction");
					this.OnQuantit_BuysActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EX_Date", DbType="VarChar(50)")]
		public string EX_Date
		{
			get
			{
				return this._EX_Date;
			}
			set
			{
				if ((this._EX_Date != value))
				{
					this.OnEX_DateChanging(value);
					this.SendPropertyChanging();
					this._EX_Date = value;
					this.SendPropertyChanged("EX_Date");
					this.OnEX_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totatCost", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> totatCost
		{
			get
			{
				return this._totatCost;
			}
			set
			{
				if ((this._totatCost != value))
				{
					this.OntotatCostChanging(value);
					this.SendPropertyChanging();
					this._totatCost = value;
					this.SendPropertyChanged("totatCost");
					this.OntotatCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit")]
		public System.Nullable<bool> Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalesAction")]
	public partial class SalesAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_SaleAction;
		
		private System.Nullable<int> _ID_Sale;
		
		private System.Nullable<int> _ID_Product;
		
		private System.Nullable<int> _Quantity_SaleAction;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _TotalPrice;
		
		private System.Nullable<bool> _Exist;
		
		private System.Nullable<int> _SalePrecentage;
		
		private string _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_SaleActionChanging(int value);
    partial void OnID_SaleActionChanged();
    partial void OnID_SaleChanging(System.Nullable<int> value);
    partial void OnID_SaleChanged();
    partial void OnID_ProductChanging(System.Nullable<int> value);
    partial void OnID_ProductChanged();
    partial void OnQuantity_SaleActionChanging(System.Nullable<int> value);
    partial void OnQuantity_SaleActionChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnTotalPriceChanging(System.Nullable<decimal> value);
    partial void OnTotalPriceChanged();
    partial void OnExistChanging(System.Nullable<bool> value);
    partial void OnExistChanged();
    partial void OnSalePrecentageChanging(System.Nullable<int> value);
    partial void OnSalePrecentageChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public SalesAction()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_SaleAction", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_SaleAction
		{
			get
			{
				return this._ID_SaleAction;
			}
			set
			{
				if ((this._ID_SaleAction != value))
				{
					this.OnID_SaleActionChanging(value);
					this.SendPropertyChanging();
					this._ID_SaleAction = value;
					this.SendPropertyChanged("ID_SaleAction");
					this.OnID_SaleActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Sale", DbType="Int")]
		public System.Nullable<int> ID_Sale
		{
			get
			{
				return this._ID_Sale;
			}
			set
			{
				if ((this._ID_Sale != value))
				{
					this.OnID_SaleChanging(value);
					this.SendPropertyChanging();
					this._ID_Sale = value;
					this.SendPropertyChanged("ID_Sale");
					this.OnID_SaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Product", DbType="Int")]
		public System.Nullable<int> ID_Product
		{
			get
			{
				return this._ID_Product;
			}
			set
			{
				if ((this._ID_Product != value))
				{
					this.OnID_ProductChanging(value);
					this.SendPropertyChanging();
					this._ID_Product = value;
					this.SendPropertyChanged("ID_Product");
					this.OnID_ProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity_SaleAction", DbType="Int")]
		public System.Nullable<int> Quantity_SaleAction
		{
			get
			{
				return this._Quantity_SaleAction;
			}
			set
			{
				if ((this._Quantity_SaleAction != value))
				{
					this.OnQuantity_SaleActionChanging(value);
					this.SendPropertyChanging();
					this._Quantity_SaleAction = value;
					this.SendPropertyChanged("Quantity_SaleAction");
					this.OnQuantity_SaleActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit")]
		public System.Nullable<bool> Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalePrecentage", DbType="Int")]
		public System.Nullable<int> SalePrecentage
		{
			get
			{
				return this._SalePrecentage;
			}
			set
			{
				if ((this._SalePrecentage != value))
				{
					this.OnSalePrecentageChanging(value);
					this.SendPropertyChanging();
					this._SalePrecentage = value;
					this.SendPropertyChanged("SalePrecentage");
					this.OnSalePrecentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Buys")]
	public partial class Buy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Buy;
		
		private System.Nullable<System.DateTime> _DateBuy;
		
		private System.Nullable<decimal> _BuyCost;
		
		private int _ID_Caule;
		
		private int _ID_User;
		
		private System.Nullable<bool> _Exist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_BuyChanging(int value);
    partial void OnID_BuyChanged();
    partial void OnDateBuyChanging(System.Nullable<System.DateTime> value);
    partial void OnDateBuyChanged();
    partial void OnBuyCostChanging(System.Nullable<decimal> value);
    partial void OnBuyCostChanged();
    partial void OnID_CauleChanging(int value);
    partial void OnID_CauleChanged();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnExistChanging(System.Nullable<bool> value);
    partial void OnExistChanged();
    #endregion
		
		public Buy()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Buy", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Buy
		{
			get
			{
				return this._ID_Buy;
			}
			set
			{
				if ((this._ID_Buy != value))
				{
					this.OnID_BuyChanging(value);
					this.SendPropertyChanging();
					this._ID_Buy = value;
					this.SendPropertyChanged("ID_Buy");
					this.OnID_BuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateBuy", DbType="Date")]
		public System.Nullable<System.DateTime> DateBuy
		{
			get
			{
				return this._DateBuy;
			}
			set
			{
				if ((this._DateBuy != value))
				{
					this.OnDateBuyChanging(value);
					this.SendPropertyChanging();
					this._DateBuy = value;
					this.SendPropertyChanged("DateBuy");
					this.OnDateBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyCost", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> BuyCost
		{
			get
			{
				return this._BuyCost;
			}
			set
			{
				if ((this._BuyCost != value))
				{
					this.OnBuyCostChanging(value);
					this.SendPropertyChanging();
					this._BuyCost = value;
					this.SendPropertyChanged("BuyCost");
					this.OnBuyCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Caule", DbType="Int NOT NULL")]
		public int ID_Caule
		{
			get
			{
				return this._ID_Caule;
			}
			set
			{
				if ((this._ID_Caule != value))
				{
					this.OnID_CauleChanging(value);
					this.SendPropertyChanging();
					this._ID_Caule = value;
					this.SendPropertyChanged("ID_Caule");
					this.OnID_CauleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit")]
		public System.Nullable<bool> Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Store")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Product;
		
		private int _Defective;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ProductChanging(int value);
    partial void OnID_ProductChanged();
    partial void OnDefectiveChanging(int value);
    partial void OnDefectiveChanged();
    #endregion
		
		public Store()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Product", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Product
		{
			get
			{
				return this._ID_Product;
			}
			set
			{
				if ((this._ID_Product != value))
				{
					this.OnID_ProductChanging(value);
					this.SendPropertyChanging();
					this._ID_Product = value;
					this.SendPropertyChanged("ID_Product");
					this.OnID_ProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defective", DbType="Int NOT NULL")]
		public int Defective
		{
			get
			{
				return this._Defective;
			}
			set
			{
				if ((this._Defective != value))
				{
					this.OnDefectiveChanging(value);
					this.SendPropertyChanging();
					this._Defective = value;
					this.SendPropertyChanged("Defective");
					this.OnDefectiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_User;
		
		private string _User_Name;
		
		private string _User_Psw;
		
		private bool _Exist;
		
		private bool _SalePermissions;
		
		private bool _BuyPermissions;
		
		private bool _ProductsPermissions;
		
		private bool _ReportsPermissions;
		
		private bool _UsersPermissions;
		
		private bool _SettingPermissions;
		
		private bool _StoragePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnUser_PswChanging(string value);
    partial void OnUser_PswChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnSalePermissionsChanging(bool value);
    partial void OnSalePermissionsChanged();
    partial void OnBuyPermissionsChanging(bool value);
    partial void OnBuyPermissionsChanged();
    partial void OnProductsPermissionsChanging(bool value);
    partial void OnProductsPermissionsChanged();
    partial void OnReportsPermissionsChanging(bool value);
    partial void OnReportsPermissionsChanged();
    partial void OnUsersPermissionsChanging(bool value);
    partial void OnUsersPermissionsChanged();
    partial void OnSettingPermissionsChanging(bool value);
    partial void OnSettingPermissionsChanged();
    partial void OnStoragePermissionsChanging(bool value);
    partial void OnStoragePermissionsChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Psw", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string User_Psw
		{
			get
			{
				return this._User_Psw;
			}
			set
			{
				if ((this._User_Psw != value))
				{
					this.OnUser_PswChanging(value);
					this.SendPropertyChanging();
					this._User_Psw = value;
					this.SendPropertyChanged("User_Psw");
					this.OnUser_PswChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalePermissions", DbType="Bit NOT NULL")]
		public bool SalePermissions
		{
			get
			{
				return this._SalePermissions;
			}
			set
			{
				if ((this._SalePermissions != value))
				{
					this.OnSalePermissionsChanging(value);
					this.SendPropertyChanging();
					this._SalePermissions = value;
					this.SendPropertyChanged("SalePermissions");
					this.OnSalePermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyPermissions", DbType="Bit NOT NULL")]
		public bool BuyPermissions
		{
			get
			{
				return this._BuyPermissions;
			}
			set
			{
				if ((this._BuyPermissions != value))
				{
					this.OnBuyPermissionsChanging(value);
					this.SendPropertyChanging();
					this._BuyPermissions = value;
					this.SendPropertyChanged("BuyPermissions");
					this.OnBuyPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductsPermissions", DbType="Bit NOT NULL")]
		public bool ProductsPermissions
		{
			get
			{
				return this._ProductsPermissions;
			}
			set
			{
				if ((this._ProductsPermissions != value))
				{
					this.OnProductsPermissionsChanging(value);
					this.SendPropertyChanging();
					this._ProductsPermissions = value;
					this.SendPropertyChanged("ProductsPermissions");
					this.OnProductsPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportsPermissions", DbType="Bit NOT NULL")]
		public bool ReportsPermissions
		{
			get
			{
				return this._ReportsPermissions;
			}
			set
			{
				if ((this._ReportsPermissions != value))
				{
					this.OnReportsPermissionsChanging(value);
					this.SendPropertyChanging();
					this._ReportsPermissions = value;
					this.SendPropertyChanged("ReportsPermissions");
					this.OnReportsPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsersPermissions", DbType="Bit NOT NULL")]
		public bool UsersPermissions
		{
			get
			{
				return this._UsersPermissions;
			}
			set
			{
				if ((this._UsersPermissions != value))
				{
					this.OnUsersPermissionsChanging(value);
					this.SendPropertyChanging();
					this._UsersPermissions = value;
					this.SendPropertyChanged("UsersPermissions");
					this.OnUsersPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingPermissions", DbType="Bit NOT NULL")]
		public bool SettingPermissions
		{
			get
			{
				return this._SettingPermissions;
			}
			set
			{
				if ((this._SettingPermissions != value))
				{
					this.OnSettingPermissionsChanging(value);
					this.SendPropertyChanging();
					this._SettingPermissions = value;
					this.SendPropertyChanged("SettingPermissions");
					this.OnSettingPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoragePermissions", DbType="Bit NOT NULL")]
		public bool StoragePermissions
		{
			get
			{
				return this._StoragePermissions;
			}
			set
			{
				if ((this._StoragePermissions != value))
				{
					this.OnStoragePermissionsChanging(value);
					this.SendPropertyChanging();
					this._StoragePermissions = value;
					this.SendPropertyChanged("StoragePermissions");
					this.OnStoragePermissionsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sales")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Sale;
		
		private System.Nullable<System.DateTime> _SaleDate;
		
		private System.Nullable<decimal> _SalePrice;
		
		private int _ID_User;
		
		private System.Nullable<bool> _Exist;
		
		private string _PayType;
		
		private System.Nullable<decimal> _paid;
		
		private int _ID_Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_SaleChanging(int value);
    partial void OnID_SaleChanged();
    partial void OnSaleDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSaleDateChanged();
    partial void OnSalePriceChanging(System.Nullable<decimal> value);
    partial void OnSalePriceChanged();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnExistChanging(System.Nullable<bool> value);
    partial void OnExistChanged();
    partial void OnPayTypeChanging(string value);
    partial void OnPayTypeChanged();
    partial void OnpaidChanging(System.Nullable<decimal> value);
    partial void OnpaidChanged();
    partial void OnID_CustomerChanging(int value);
    partial void OnID_CustomerChanged();
    #endregion
		
		public Sale()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Sale", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_Sale
		{
			get
			{
				return this._ID_Sale;
			}
			set
			{
				if ((this._ID_Sale != value))
				{
					this.OnID_SaleChanging(value);
					this.SendPropertyChanging();
					this._ID_Sale = value;
					this.SendPropertyChanged("ID_Sale");
					this.OnID_SaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SaleDate
		{
			get
			{
				return this._SaleDate;
			}
			set
			{
				if ((this._SaleDate != value))
				{
					this.OnSaleDateChanging(value);
					this.SendPropertyChanging();
					this._SaleDate = value;
					this.SendPropertyChanged("SaleDate");
					this.OnSaleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalePrice", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> SalePrice
		{
			get
			{
				return this._SalePrice;
			}
			set
			{
				if ((this._SalePrice != value))
				{
					this.OnSalePriceChanging(value);
					this.SendPropertyChanging();
					this._SalePrice = value;
					this.SendPropertyChanged("SalePrice");
					this.OnSalePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="Int NOT NULL")]
		public int ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit")]
		public System.Nullable<bool> Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayType", DbType="VarChar(50)")]
		public string PayType
		{
			get
			{
				return this._PayType;
			}
			set
			{
				if ((this._PayType != value))
				{
					this.OnPayTypeChanging(value);
					this.SendPropertyChanging();
					this._PayType = value;
					this.SendPropertyChanged("PayType");
					this.OnPayTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paid", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> paid
		{
			get
			{
				return this._paid;
			}
			set
			{
				if ((this._paid != value))
				{
					this.OnpaidChanging(value);
					this.SendPropertyChanging();
					this._paid = value;
					this.SendPropertyChanged("paid");
					this.OnpaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Customer", DbType="Int NOT NULL")]
		public int ID_Customer
		{
			get
			{
				return this._ID_Customer;
			}
			set
			{
				if ((this._ID_Customer != value))
				{
					this.OnID_CustomerChanging(value);
					this.SendPropertyChanging();
					this._ID_Customer = value;
					this.SendPropertyChanged("ID_Customer");
					this.OnID_CustomerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
